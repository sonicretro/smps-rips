; --- Arnold Palmer Tournament Golf/Super Masters Golf SMPS Driver Definition ---
; early SMPS Z80

[Settings]
; Arnold Palmer Tournament Golf Default values (JU):
; 1C00 - 07 80 - ROM Bank (078000h)
; 1C02 - 00 80 - Global Pointer List Offset (8000h)
; pre-SMPS and early SMPS Z80 drivers don't have more configuration bytes.
;
; The J driver relies on VInt for timing.
; The U driver sets Timer B to CBh and uses that for timing.

; forced Default Values for Timing
; default Mode (hex):
;	00 - update all on Vertical Interrupt (NTSC: 60 Hz/PAL: 50 Hz)
;	20 - update all when YM2612 Timer A expires [not in actual driver]
;	40 - update all when YM2612 Timer B expires (Note: often used with Timer B = CBh)
;	80 - update music when Timer A expires, update SFX when Timer B expires
;	FF - don't set a default
DefTimingMode = 00	; J - 00, U - 40
LockTimingMode = True
; Default values for the YM2612 Timers (can be dec or hex)
DefTimerA = 000h
DefTimerB = CBh		; 62.81 Hz

[Main]
; Pointer Format
;	68K - SMPS 68k
;	RST - SMPS 68k/Ristar
;	Z80 - SMPS Z80
PtrFmt = Z80

; Instrument Mode
;	DEFAULT - default SMPS registers (B0 30 38 34 3C 50 ... 8C 40 48 44 4C)
;	HARDWARE - hardware order for operators (B0 30 34 38 3C 50 ...)
;	CUSTOM - custom instrument definition, needs additional InsRegs setting
InsMode = Custom
; Instrument Register Order for early SMPS Z80
InsRegs = B0 B4 40 48 44 4C 30 38 34 3C 50 58 54 5C 60 68 64 6C 70 78 74 7C 80 88 84 8C

; FM Channel Order [optional]
;	Here you can rearrange the 6 FM channels. You'll need this if FM drums use the Special FM3 mode.
;	Channels numbers are: 0..2 (FM 1..3), 4..6 (FM 4..6)
;	Note: The drum channel is (10 + FM channel).
;	Examples:
;		16 0 1 2 4 5 6 (default)
;		12 0 1 4 5 6 2 (commonly used from pre-SMPS Z80 to SMPS Z80 Type 1 with FM/PSG drums) 
FMChnOrder = 12 0 1 4 5 6 2

; Tempo Mode
;	TIMEOUT - used by preSMPS, SMPS Z80 Type 1 and most SMPS 68k
;	OVERFLOW - used by SMPS Z80 Type 2 and some late SMPS 68k
;	OVERFLOW2 - used by Sonic 2
TempoMode = Timeout

; FM Base Note
;	B - frequency table begins with a B note, so the table entry is (note - 80h) [SMPS 68k]
;	C - frequency table begins with a C note, so the table entry is (note - 81h) [SMPS Z80]
FMBaseNote = C
; FM Base Octave - usually 0, can be 1 if the FM tables begin with a 0Axx frequency
FMBaseOctave = 0
; Octave Wrap for Detune (caused by PitchSlide routine)
;	If enabled, frequencies <284h are moved to the next lower octave.
DetuneOctWrap = False

; prevent FM Note On from being sent when HOLD (SMPS Z80) or REST (SMPS 68k) flag is set.
NoteOnPrevent = Hold

; Note-Rest-Delay-Delay behaviour
;	RESET - a Rest resets the note frequency, so the 2nd Delay plays nothing [most SMPS 68k]
;	KEEP - a Rest keeps the note frequency, so the 2nd Delay replays the last Note [all SMPS Z80, some SMPS 68k]
DelayFreq = Reset

; Modulation Algorithm
;	can be 68K or Z80
ModAlgo = Z80	; actually unused - pre-SMPS and early SMPS drivers use Modulation Envelopes only

; Envelope Multiplier Mode
;	PRE - preSMPS 68k
;	68K - SMPS 68k
;	Z80 - SMPS Z80, preSMPS Z80
EnvMult = Z80

; Volume Mode
;	ALGO - the FM Algorithm/Connection setting defines the TL operators affected by the channel volume [SMPS 68k]
;	BIT7 - TL operators with Bit 7 set (value 80-FF) are affected by the channel volume [SMPS Z80]
VolMode = Algo

; Frequency values
;	Values can be decimal or hexadecimal (0xABC, $ABC or ABCh) and separates by spaces.
;	All numbers on the line are read until something invalid is found.
;	A multiline frequency list is possible by enclosing the block with curly brackets {}
;	Note: Due to how the parser works, there must be a space before the closing bracket.
;	
;	You can also use these default frequency values:
;	FMFreqs: DEF_68K, DEF_Z80
;	PSGFreqs: DEF_PRE (pre-SMPS), DEF_68K, DEF_Z80_T1, DEF_Z80_T2
FMFreqs = {
	0283h 02A4h 02CFh 02F8h 0326h 0356h 0388h 03BEh 03F8h 0434h 0474h 04B8h
	0A7Eh 0AA4h 0ACFh 0AF8h 0B26h 0B56h 0B88h 0BBEh 0BF8h 0C34h 0C74h 0CB8h
	127Eh 12A4h 12CFh 12F8h 1326h 1356h 1388h 13BEh 13F8h 1434h 1474h 14B8h
	1A7Eh 1AA4h 1ACFh 1AF8h 1B26h 1B56h 1B88h 1BBEh 1BF8h 1C34h 1C74h 1CB8h
	227Eh 22A4h 22CFh 22F8h 2326h 2356h 2388h 23BEh 23F8h 2434h 2474h 24B8h
	2A7Eh 2AA4h 2ACFh 2AF8h 2B26h 2B56h 2B88h 2BBEh 2BF8h 2C34h 2C74h 2CB8h
	327Eh 32A4h 32CFh 32F8h 3326h 3356h 3388h 33BEh 33F8h 3434h 3474h 34B8h
	3A7Eh 3AA4h 3ACFh 3AF8h 3B26h 3B56h 3B88h 3BBEh 3BF8h 3C34h 3C74h 3CB8h
	}
PSGFreqs = {
	35Dh 32Dh 2FFh 2D4h 2ABh 285h 261h 23Fh 21Eh 200h 1E3h 1C8h
	1AFh 196h 180h 16Ah 156h 143h 130h 11Fh 10Fh 100h 0F2h 0E4h
	0D7h 0CBh 0C0h 0B5h 0ABh 0A1h 098h 090h 088h 080h 079h 072h
	06Ch 066h 060h 05Bh 055h 051h 04Ch 048h 044h 040h 03Ch 039h
	036h 033h 030h 02Dh 02Bh 028h 026h 024h 022h 020h 01Eh 01Ch
	01Bh 019h 018h 016h 015h 014h 013h 012h 011h }
FM3Freqs = 000h 132h 18Eh 1E4h


[EnvelopeCmds]
; Possible commands:
;	RESET - reset the Envelope Index to 0
;	HOLD - hold the envelope at the current level
;	LOOP - loop back to the Envelope Index set by the following byte
;	STOP - stop the envelope and note
;	CHG_MULT - change the Envelope Multiplier (Modulation Envelope only)
80 = Reset
81 = Hold
82 = Loop
83 = Stop
84 = Chg_Mult
